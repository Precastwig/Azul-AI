include/Logger.hpp[36m:[m			[1;31mstd::cout[m << levelToString(l) << str << "\033[0m\n";
include/Logger.hpp[36m:[m			[1;31mstd::cout[m << levelToString(l) << d << "\033[0m\n";
include/Logger.hpp[36m:[m			[1;31mstd::cout[m << levelToString(l) << "(" << v.x << ", " << v.y << ")" << "\033[0m\n";
include/utils/openGA.hpp[36m:[musing [1;31mstd::cout[m;
src/Factory.cpp[36m:[m				[1;31mstd::cout[m << choice.factory;
src/Game.cpp[36m:[m		[1;31mstd::cout[m << "=======================\n";
src/Game.cpp[36m:[m		[1;31mstd::cout[m << "Round " << round_number << ":\n";
src/Game.cpp[36m:[m		[1;31mstd::cout[m << "Bonus tile colour: " << Tile::toString(m_bonus_type) << "\n";
src/Game.cpp[36m:[m	[1;31mstd::cout[m << "=================\nGame over:\n";
src/Game.cpp[36m:[m		[1;31mstd::cout[m << pos << ". " << player->colour().toString() << "   " << player->points() << " points\n";
src/Game.cpp[36m:[m	[1;31mstd::cout[m << "\n========================\nPLACING STAGE\n";
src/Game.cpp[36m:[m		[1;31mstd::cout[m << current_player->toString();
src/Game.cpp[36m:[m	[1;31mstd::cout[m << "\n\nFACTORIES\n-----------------\n";
src/Game.cpp[36m:[m		[1;31mstd::cout[m << "Factory " << i << ": " << m_factories[i]->toString() << "\n";
src/Game.cpp[36m:[m	[1;31mstd::cout[m << "Centre: " << m_centre->toString() << "\n";
src/HumanCommandLine.cpp[36m:[m		// [1;31mstd::cout[m << "Choose a factory\n";
src/HumanCommandLine.cpp[36m:[m		// [1;31mstd::cout[m << "Choose a colour\n";
src/HumanCommandLine.cpp[36m:[m		// 	[1;31mstd::cout[m << i << ". " << tile_strings[i] << "\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << i << ". " << Tile::toString(choices[i].tile_colour) << " factory " << choices[i].factory->id() << "\n";
src/HumanCommandLine.cpp[36m:[m	[1;31mstd::cout[m << toString();
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << "You have no more placing choices\n";
src/HumanCommandLine.cpp[36m:[m		[1;31mstd::cout[m << "Choose a location to place:\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << i << ". " << location_choices[i]->toString() << "\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << "Not a choice\n";
src/HumanCommandLine.cpp[36m:[m		[1;31mstd::cout[m << "Choose a placement:\n" << m_board.toString(star_choice);
src/HumanCommandLine.cpp[36m:[m				[1;31mstd::cout[m << choice.index.getIndex() + 1 << ", col:" << choice.cost.num_colour << ", bonus:" << choice.cost.num_bonus << "\n";
src/HumanCommandLine.cpp[36m:[m		[1;31mstd::cout[m << "\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << "Not a choice\n";
src/HumanCommandLine.cpp[36m:[m		[1;31mstd::cout[m << "\nChoose " << number << " bonus pieces\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << c->toString();
src/HumanCommandLine.cpp[36m:[m		[1;31mstd::cout[m << "Discard tiles until four are left\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << Tile::toString(tile) << ": " << howManyColourStored(tile) << "\n";
src/HumanCommandLine.cpp[36m:[m			[1;31mstd::cout[m << "Invalid choice, try again\n";
src/Player.cpp[36m:[m	// [1;31mstd::cout[m << "Press 1 to output all choices\n";
src/Player.cpp[36m:[m	// 		[1;31mstd::cout[m << location_strings[choice.star] << " " << tile_strings[choice.cost.colour] << ": " << choice.cost.num_colour << " Bonus: " << choice.cost.num_bonus << "\n";
src/Player.cpp[36m:[m	// [1;31mstd::cout[m << "Press 1 to output all filtered choices\n";
src/Player.cpp[36m:[m	// 		[1;31mstd::cout[m << location_strings[choice.star] << " " << tile_strings[choice.cost.colour] << ": " << choice.cost.num_colour << " Bonus: " << choice.cost.num_bonus << "\n";
src/RandomAI.cpp[36m:[m	[1;31mstd::cout[m << "\nChoosing bonus pieces!\n";
